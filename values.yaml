# This values.yaml file will allow you to customize the Integrify installation to your specific needs.


# Application Parameters
appName: integrify
host:
  name: www.yourdomain.demo

globalEnv:
  - name: PORTAL_URL
    value: "http://www.yourdomain.demo"
  - name: CONSOLE_LOG_FORMAT
    value: text
  - name:  ENV_PLATFORM
    value: kubernetes
  - name: PORT
    value: "3555"

secrets:
  awsCreds: {"accessKeyId": "YOUR_ACCESS_KEY_ID", "secretAccessKey": "YOUR_SECRET_ACCESS_KEY", "region": "us-east-1"} # Example key. You should replace with your own AWS creds.
  integrifyEnvToken: 12345678-1234-1234-1234-123456789ABC # Example key. You should replace with your own ENV key.
  redisConn: {"host":"redis.yourdomain.demo", "port": 6379, "db": 0} # Change host to your Redis server
  recapthchaSecurityKey: 12345678-1234-1234-1234-123456789ABC # Example key. You should replace with your own recaptcha key.
  credentialsSecret: 12345678-1234-1234-1234-123456789ABC # Example key. You should replace with your own password used to encrypt credentials.

config:
  portalUrl: "http://www.yourdomain.demo"
  featureFlags:
    - id: example-for-tests
      active: true
      description: > 
            used in integration test - do not remove!
  consumersConn: data source=sql.yourdomain.demo;database=CONSUMERS_DATABASE_NAME;user id=DATABASE_USER_ID;password=DATABASE_USER_PASSWORD;
  logger:
    activeConfig: debug
    rootPath: ./logs
    fileDateFormat: YYYY_MM_DD
    production: {}
    debug:
      error:
        transport:
          - console
        color: red
        path: "/{date}_error_{source}.log"
        include:
          - stack
          - module
        disabled: false
      warning:
        transport:
          - console
        color: yellow
        path: "/{date}_warning_{source}.log"
        disabled: false
      info:
        transport:
          - console
        color: green
        path: "/{date}_info_{source}.log"
        disabled: false
      milestone:
        transport:
          - console
        color: white
        disabled: false
      session:
        transport:
          - console
        format: session_stats
        path: "/{date}_session_stats_{source}.log"
        disabled: false
      console:
        disabled: false
  mongo:
    connectionString: "mongodb://mongo.yourdomain.demo:27017" # Change host to your mongo server
    options:
      useUnifiedTopology: true
      useNewUrlParser: true
      keepAlive: true
  client:
    endpointSecurityChecks: true
    max_sockets: 5000
    requestDetailCacheMinutes: 30
  service:
    task_processor_interval: 1
    querygen_trace: "false"
    debug_logs: "off"
    TimeZoneIndex: "20"
  jwtSecret: "12345678-1234-1234-1234-123456789ABC" # Example key. You should update with your own secret
  expiresInUnit: days
  expiresInAmount: 5

# Image Parameters
image:
  repo: 940767003169.dkr.ecr.us-east-1.amazonaws.com
  pullPolicy: Always
  # Pull policy options are IfNotPresent, Always, Never. 
  # Image pull information can be found here - https://kubernetes.io/docs/concepts/containers/images/

# Ingress Parameters
ingress:
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"

# Services information
auth:
  repoName: api-auth
  name: auth
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/auth/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

browseHouse:
  repoName: browse-house
  name: browse-house
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/browse-house/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

client:
  repoName: client
  name: workflow
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

configProcessor:
  repoName: config-processor
  name: config-processor
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  restart: Always
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

coreService:
  repoName: core-service
  name: core-service
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /healthcheck
  env:
  - name: MIN_THREADS
    value: "150"
  - name: REQUEST_LOGGING
    value: "off"
  - name: ASPNETCORE_URLS
    value: "http://*:3555"
  resources:
    requests:
      cpu: "2"
      memory: "4Gi"
    limits:
      cpu: "2"
      memory: "4Gi"

dashboards:
  repoName: api-dashboards
  name: dashboards
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/dashboards/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

files:
  repoName: api-files
  name: files
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  ## use an existing Persistent Volume Claim if not using an S3 bucket
  # existingClaim: files-pv-claim 
  restart: Always
  healthcheck: /api/files/healthcheck
  env:
  - name: FILE_STORE
    value: "/integrify/files"
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

forms:
  repoName: api-forms
  name: forms
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/forms/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

instance:
  repoName: api-instance
  name: instance
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/instance/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

integrations:
  repoName: api-integrations
  name: integrations
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/integrations/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

processes:
  repoName: api-processes
  name: processes
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/processes/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

reports:
  repoName: api-reports
  name: reports
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/reports/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

scheduler:
  repoName: scheduler
  name: scheduler
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/scheduler/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

sessionProcessor:
  repoName: session-processor
  name: session-processor
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  restart: Always
  resources:
    requests:
      cpu: ".5"
      memory: "1Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

settings:
  repoName: api-settings
  name: settings
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/settings/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

ssp:
  repoName: single-spa-portal
  name: portal
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3000
  restart: Always
  healthcheck: /
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

taskDispatcher:
  repoName: api-task-dispatcher
  name: task-dispatcher
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/task-dispatcher/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

taskProcessor:
  repoName: core-service-tp
  name: task-processor
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  restart: Always
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

tenant:
  repoName: api-tenant
  name: tenant
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/tenant/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

user:
  repoName: api-user
  name: user
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50  
  port: 3555
  restart: Always
  healthcheck: /api/user/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

document-engine:
  # https://pspdfkit.com/guides/document-engine/configuration/overview/
  # https://pspdfkit.com/guides/document-engine/deployment/product-activation/
  #
  pspdfkit:
    license:
      # `ACTIVATION_KEY` or `LICENSE_KEY` (if `isOffline` is `true`)
      activationKey: ""
      # Is the license offline
      isOffline: false
      # Query existing secret for the activation key
      externalSecret: 
        # External secret name for license
        name: document-engine-license
        # The key in the secret used to retrieve the activation key
        key: DOCUMENT_ENGINE_ACTIVATION_KEY
    auth:
      api:
        # `API_AUTH_TOKEN` should be long enough
        apiToken: secret
        jwt:
          enabled: true
          algorithm: RS256
          createSecret: true
          publicKey: |
            -----BEGIN PUBLIC KEY-----
            MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAqX1b9fjwasAL3PDPLBKg
            QNR9KdCOO4uXqrO3nB1BCy+arpWgCRZmx98rrCcx6FjVVWp8aN9K8CQL0dFZ/5mD
            f0+URPmHFYq83XM3WH6GoaELpDAS53ja+wt6SfDvNLVTdE6ju/5OnhsKg7U2ic/2
            CM/kZWrW04K00EWLxQnmuar/5+jds29CuNTA0Kuu5XJEx6BWLfqkUdEkRYpkP0NA
            dLuUQru9pBTX5mPu7Xt+kJq59p/JtUrcKrXAlnj3UsjP4f8fej+CZetqMkoPOgip
            mURWtMWZPEDUZuPj2RT5cnKfELnNJBvctmFpoQEc20kXOaZ5/jUn3mqy2RkNkJyc
            7EvLKyEGtt789KFXT0s4pwpOyEdw/imulw6YtYWlyuiCnkCMxcRB0oYxqkTAkKrR
            t/OmkUtd9jKcIs7oV1iH1BtB2cvxXC/9rSfG6aVJd/NKHuStPg/q9WdxJBRZvymh
            J+muon0+kG2GlxiU0o0CPR4rM5WzW3bZFl8W7IWOVIZjRlluHYqsGHm/ocaZk9Cr
            qjLaDhpBIfhP9BiBp7rwj6BHc3MNi4rwVOw3Jy4iygN/PexDR+xEHipjcXysxsYj
            oeROBfOu+xloYzFsZMAIlqDXiXoCI7rE0itTavCsUFtybnkHRV14J0jmjB99YTWT
            PpLat3eBNfZK4xkXw8F6K6kCAwEAAQ==
            -----END PUBLIC KEY-----
      dashboard:
        # Enable dashboard
        enabled: true
        # `DASHBOARD_USERNAME`
        username: admin
        # `DASHBOARD_PASSWORD` — will generate a random password if not set
        password: admin
        # Use an external secret for dashboard credentials instead of the values from `pspdfkit.auth.dashboard.*`
    # Log level
    log:
      level: debug
    # `TRUSTED_PROXIES`
    trustedProxies: default
    # Signing service parameters
    signingService:
      # Enable signing service integration
      enabled: true
      # `SIGNING_SERVICE_URL`
      url: https://signing-thing.local/sign
      # `SIGNING_SERVICE_TIMEOUT` in seconds
      timeoutSeconds: 10
    storage:
      # Enable separate migration jobs.
      # It `true`, results in `ENABLE_DATABASE_MIGRATIONS=false` in the main Document Engine container
      enableMigrationJobs: false
      # Database engine: only `postgresql` is currently supported
      databaseEngine: postgresql
      # `DATABASE_CONNECTIONS`
      databaseConnections: 20
      # `ASSET_STORAGE_BACKEND`
      assetStorageBackend: built-in
      # `ENABLE_ASSET_STORAGE_FALLBACK`
      enableAssetStorageFallback: false
      # PostgreSQL database settings
      postgres:
        enabled: true
        # `PGHOST`
        host: integrify-postgresql
        # `PGDATABASE`
        database: pspdfkit
        # `PGUSER`
        username: postgres
        # `PGPASSWORD`
        password: postgres
        # `PG_ADMIN_USER`
        adminUsername: postgres
        # `PG_ADMIN_PASSWORD`
        adminPassword: postgres
        tls:
          # `PGSSL`
          enabled: false
          # Negated `PGSSL_DISABLE_VERIFY`
          verify: true
          # Path from `pspdfkit.trustConfigMaps`, wraps around `PGSSL_CA_CERT_PATH` 
          trustFileName: ""
  postgresql:
    enabled: true
    architecture: standalone
    primary:
      persistence:
        enabled: false
      extendedConfiguration: |
        log_statement = ddl
      pgHbaConfiguration: |
        local    all             all                                trust
        host     all             all        127.0.0.1/32            trust
        host     all             all        ::1/128                 trust
        host     all             all        0.0.0.0/0               md5
        host     all             all        ::/0                    md5
    auth:
      enablePostgresUser: true
      postgresPassword: postgres
      username: pspdfkit
      password: pspdfkit
      database: pspdfkit
    tls:
      enabled: false

