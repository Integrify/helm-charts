# This values.yaml file will allow you to customize the Integrify installation to your specific needs.


# Application Parameters
appName: integrify
host:
  name: www.yourdomain.demo

globalEnv:
  - name: PORTAL_URL
    value: "http://www.yourdomain.demo"
  - name: CONSOLE_LOG_FORMAT
    value: text
  - name:  ENV_PLATFORM
    value: kubernetes
  - name: PORT
    value: "3555"
  - name:  CENTRAL_ROOT
    value: https://central.integrify.com

secrets:
  awsCreds: {"accessKeyId": "YOUR_ACCESS_KEY_ID", "secretAccessKey": "YOUR_SECRET_ACCESS_KEY", "region": "us-east-1"} # Example key. You should replace with your own AWS creds.
  integrifyEnvToken: 12345678-1234-1234-1234-123456789ABC # Example key. You should replace with your own ENV key.
  redisConn: {"host":"redis.yourdomain.demo", "port": 6379, "db": 0} # Change host to your Redis server
  recapthchaSecurityKey: 12345678-1234-1234-1234-123456789ABC # Example key. You should replace with your own recaptcha key.
  credentialsSecret: abcdefgh-1234-abcd-5678-abcdefgh1234 # Example key. You should replace with your own secret.

config:
  portalUrl: "http://www.yourdomain.demo"
  featureFlags:
    - id: example-for-tests
      active: true
      description: > 
            used in integration test - do not remove!
  consumersConn: data source=sql.yourdomain.demo;database=CONSUMERS_DATABASE_NAME;user id=DATABASE_USER_ID;password=DATABASE_USER_PASSWORD;
  mongo:
    connectionString: "mongodb://mongo.yourdomain.demo:27017" # Change host to your mongo server
    options:
      useUnifiedTopology: true
      useNewUrlParser: true
      keepAlive: true
      maxPoolSize: 100
  client:
    endpointSecurityChecks: true
    max_sockets: 5000
    requestDetailCacheMinutes: 30
  service:
    task_processor_interval: 1
    querygen_trace: "false"
    debug_logs: "off"
    TimeZoneIndex: "20"
  jwtSecret: "12345678-1234-1234-1234-123456789ABC" # Example key. You should update with your own secret
  expiresInUnit: days
  expiresInAmount: 5
  documentEngine:
    containerUrl: "http://integrify-document-engine:5000"
    viewerUrl: "http://www.yourdomain.demo:5000"
    apiToken: "12345678-1234-1234-1234-123456789ABC" # Replace with your own document-engine API token
    privateKey: |-
            -----BEGIN RSA PRIVATE KEY-----
            PASTE YOUR PRIVATE KEY HERE
            KEY SHOULD BE IN PEM FORMAT
            -----END RSA PRIVATE KEY-----
    # Steps to generate public and private key can be found here - https://pspdfkit.com/guides/document-engine/viewer/client-authentication/generate-a-jwt/

# Image Parameters
image:
  repo: 940767003169.dkr.ecr.us-east-1.amazonaws.com
  pullPolicy: Always
  # Pull policy options are IfNotPresent, Always, Never. 
  # Image pull information can be found here - https://kubernetes.io/docs/concepts/containers/images/

# Ingress Parameters
ingress:
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"

# Services information
auth:
  repoName: api-auth
  name: auth
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/auth/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

browseHouse:
  repoName: browse-house
  name: browse-house
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 80
  port: 3555
  restart: Always
  healthcheck: /api/instance/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

client:
  repoName: client
  name: workflow
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

configProcessor:
  repoName: config-processor
  name: config-processor
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  restart: Always
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

coreService:
  repoName: core-service
  name: core-service
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /healthcheck
  env:
  - name: MIN_THREADS
    value: "150"
  - name: REQUEST_LOGGING
    value: "off"
  - name: ASPNETCORE_URLS
    value: "http://*:3555"
  resources:
    requests:
      cpu: "2"
      memory: "4Gi"
    limits:
      cpu: "2"
      memory: "4Gi"

dashboards:
  repoName: api-dashboards
  name: dashboards
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/dashboards/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

files:
  repoName: api-files
  name: files
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  ## use an existing Persistent Volume Claim if not using an S3 bucket
  # existingClaim: files-pv-claim 
  restart: Always
  healthcheck: /api/files/healthcheck
  env:
  - name: FILE_STORE
    value: "/integrify/files"
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

forms:
  repoName: api-forms
  name: forms
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/forms/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

instance:
  repoName: api-instance
  name: instance
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/instance/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

integrations:
  repoName: api-integrations
  name: integrations
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/integrations/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

processes:
  repoName: api-processes
  name: processes
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/processes/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

reports:
  repoName: api-reports
  name: reports
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/reports/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

scheduler:
  repoName: scheduler
  name: scheduler
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/scheduler/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

sessionProcessor:
  repoName: session-processor
  name: session-processor
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  restart: Always
  resources:
    requests:
      cpu: ".5"
      memory: "1Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

settings:
  repoName: api-settings
  name: settings
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/settings/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

ssp:
  repoName: single-spa-portal
  name: portal
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3000
  restart: Always
  healthcheck: /
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

taskDispatcher:
  repoName: api-task-dispatcher
  name: task-dispatcher
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/task-dispatcher/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

taskProcessor:
  repoName: core-service-tp
  name: task-processor
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  restart: Always
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

tenant:
  repoName: api-tenant
  name: tenant
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50
  port: 3555
  restart: Always
  healthcheck: /api/tenant/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      memory: "1Gi"

user:
  repoName: api-user
  name: user
  minReplicas: 1
  maxReplicas: 3
  avgMemUtilization: 50  
  port: 3555
  restart: Always
  healthcheck: /api/user/healthcheck
  resources:
    requests:
      cpu: ".25"
      memory: "0.5Gi"
    limits:
      cpu: ".5"
      
documentEngine:
  pspdfkit:
    name: integrify-document-engine
    port: 5000

document-engine:
  # https://pspdfkit.com/guides/document-engine/configuration/overview/
  # https://pspdfkit.com/guides/document-engine/deployment/product-activation/
  #
  enabled: true
  documentEngineLicense:
    externalSecret: 
      name: document-engine-license
      # The key in the secret used to retrieve the activation key
      key: DOCUMENT_ENGINE_ACTIVATION_KEY
  apiAuth:
    # `API_AUTH_TOKEN` should be long enough
    #apiToken: "62734eaf-3fbb-40eb-8923-d39f79570d49" # this is the original token
    apiToken: "12345678-1234-1234-1234-123456789ABC"
    # Should be the same as the document-engine API token in the config section above
    jwt:
      enabled: true
      algorithm: RS256
      createSecret: true
      publicKey: |
        -----BEGIN PUBLIC KEY-----
        PASTE YOUR PUBLIC KEY HERE
        KEY SHOULD BE IN PEM FORMAT
        -----END PUBLIC KEY-----
  dashboard:
    enabled: true
    auth:
      username: admin
      password: admin
  database:
    enabled: true
    engine: postgres
    migrationJob:
      enabled: false
    postgres:
      enabled: true
      host: integrify-postgresql
      database: document-engine
      auth:
        username: postgres # You can set your own username
        password: postgres # You can set your own password
        adminUsername: postgres
        adminPassword: postgres # You can set your own password
      tls:
        enabled: false
  postgresql:
    enabled: true
    architecture: standalone
    primary:
      persistence:
        enabled: false
      extendedConfiguration: |
        log_statement = all
      pgHbaConfiguration: |
        local    all             all                                trust
        host     all             all        127.0.0.1/32            trust
        host     all             all        ::1/128                 trust
        host     all             all        0.0.0.0/0               trust
        host     all             all        ::/0                    trust
    auth:
      enablePostgresUser: true
      postgresPassword: postgres # You can set your own password - this should be the same as adminPassword above
      database: document-engine
    tls:
      enabled: false